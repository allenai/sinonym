name: Release

on:
  push:
    branches: [main]
    paths:
      - "pyproject.toml"
      - "sinonym/**"
  workflow_dispatch:

# Avoid overlapping publishes on rapid pushes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write  # required for PyPI trusted publishing

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.decide.outputs.should_publish }}
      new_version: ${{ steps.decide.outputs.new_version }}
      old_version: ${{ steps.decide.outputs.old_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # need history for version comparison

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: astral-sh/setup-uv@v6

      - name: Detect version change (pyproject.toml)
        id: decide
        shell: bash
        run: |
          BEFORE_SHA="${{ github.event.before }}"
          echo "BEFORE_SHA=$BEFORE_SHA"
          python - <<'PY'
          import os, subprocess, tomllib
          out = open(os.environ["GITHUB_OUTPUT"], "a")
          with open("pyproject.toml","rb") as f:
              new_version = tomllib.load(f)["project"]["version"]
          old_version = ""
          before = os.environ.get("BEFORE_SHA")
          if before and before != "0000000000000000000000000000000000000000":
              try:
                  blob = subprocess.check_output(["git","show",f"{before}:pyproject.toml"])
                  old_version = tomllib.loads(blob.decode())["project"]["version"]
              except subprocess.CalledProcessError:
                  pass
          should = str(bool(new_version and new_version != old_version)).lower()
          print(f"Old version: {old_version}")
          print(f"New version: {new_version}")
          print(f"Should publish: {should}")
          out.write(f"new_version={new_version}\n")
          out.write(f"old_version={old_version}\n")
          out.write(f"should_publish={should}\n")
          PY

      - name: Install dev deps
        if: steps.decide.outputs.should_publish == 'true'
        run: uv sync --group dev

      - name: Run tests
        if: steps.decide.outputs.should_publish == 'true'
        run: uv run pytest -q

      - name: Build sdist + wheel
        if: steps.decide.outputs.should_publish == 'true'
        run: uv build

      - name: Validate metadata (twine check)
        if: steps.decide.outputs.should_publish == 'true'
        run: uvx twine check dist/*

      - name: Smoke test import from sdist
        if: steps.decide.outputs.should_publish == 'true'
        run: |
          uv pip install --system dist/*.tar.gz --force-reinstall
          cd /tmp
          python -c "import sinonym; print('✓ sdist import OK:', sinonym.__file__)"

      - name: Smoke test import from wheel + resources
        if: steps.decide.outputs.should_publish == 'true'
        run: |
          uv pip install --system dist/*.whl --force-reinstall
          cd /tmp
          python - <<'PY'
          import sys, sinonym
          print("✓ Wheel import OK")
          print("PY:", sys.executable)
          print("sinonym from:", sinonym.__file__)
          try:
              import importlib.resources as ir
              files = list((ir.files("sinonym.data")).iterdir())
              print("✓ data files present:", [f.name for f in files][:8], "…")
          except Exception as e:
              print("! data access failed:", e)
              raise
          PY

      - uses: actions/upload-artifact@v4
        if: steps.decide.outputs.should_publish == 'true'
        with:
          name: dist
          path: dist

  publish:
    needs: build
    if: needs.build.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    environment: pypi  # optional, matches a protected env if you use one
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
